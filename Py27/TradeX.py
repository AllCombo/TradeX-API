# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TradeX')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TradeX')
    _TradeX = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TradeX', [dirname(__file__)])
        except ImportError:
            import _TradeX
            return _TradeX
        if fp is not None:
            try:
                _mod = imp.load_module('_TradeX', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TradeX = swig_import_helper()
    del swig_import_helper
else:
    import _TradeX
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def OpenTdx():
    return _TradeX.OpenTdx()
OpenTdx = _TradeX.OpenTdx

def CloseTdx():
    return _TradeX.CloseTdx()
CloseTdx = _TradeX.CloseTdx

def Logon(pszIP, nPort, pszVersion, nYybID, pszAccountNo, pszTradeAccount, pszJyPassword, pszTxPassword):
    return _TradeX.Logon(pszIP, nPort, pszVersion, nYybID, pszAccountNo, pszTradeAccount, pszJyPassword, pszTxPassword)
Logon = _TradeX.Logon

def Logoff(nClientID):
    return _TradeX.Logoff(nClientID)
Logoff = _TradeX.Logoff

def QueryData(nClientID, nCategory):
    return _TradeX.QueryData(nClientID, nCategory)
QueryData = _TradeX.QueryData

def QueryDatas(nClientID, nCategory):
    return _TradeX.QueryDatas(nClientID, nCategory)
QueryDatas = _TradeX.QueryDatas

def QueryHistoryData(nClientID, nCategory, pszStartDate, pszEndDate):
    return _TradeX.QueryHistoryData(nClientID, nCategory, pszStartDate, pszEndDate)
QueryHistoryData = _TradeX.QueryHistoryData

def SendOrder(nClientID, nCategory, nPriceType, pszGddm, pszZqdm, fPrice, nQuantity):
    return _TradeX.SendOrder(nClientID, nCategory, nPriceType, pszGddm, pszZqdm, fPrice, nQuantity)
SendOrder = _TradeX.SendOrder

def SendOrders(nClientID, nCategory, nPriceType, pszGddm, pszZqdm, fPrice, nQuantity, nCount, pszResult, pszErrInfo):
    return _TradeX.SendOrders(nClientID, nCategory, nPriceType, pszGddm, pszZqdm, fPrice, nQuantity, nCount, pszResult, pszErrInfo)
SendOrders = _TradeX.SendOrders

def CancelOrder(nClientID, pszExchangeID, pszhth):
    return _TradeX.CancelOrder(nClientID, pszExchangeID, pszhth)
CancelOrder = _TradeX.CancelOrder

def CancelOrders(nClientID, pszExchangeID, pszhth, nCount, pszResult, pszErrInfo):
    return _TradeX.CancelOrders(nClientID, pszExchangeID, pszhth, nCount, pszResult, pszErrInfo)
CancelOrders = _TradeX.CancelOrders

def GetQuote(nClientID, pszZqdm):
    return _TradeX.GetQuote(nClientID, pszZqdm)
GetQuote = _TradeX.GetQuote

def GetQuotes(nClientID, pszZqdm):
    return _TradeX.GetQuotes(nClientID, pszZqdm)
GetQuotes = _TradeX.GetQuotes

def Repay(nClientID, pszAmount):
    return _TradeX.Repay(nClientID, pszAmount)
Repay = _TradeX.Repay

def TdxHq_Connect(pszIP, nPort):
    return _TradeX.TdxHq_Connect(pszIP, nPort)
TdxHq_Connect = _TradeX.TdxHq_Connect

def TdxHq_Disconnect():
    return _TradeX.TdxHq_Disconnect()
TdxHq_Disconnect = _TradeX.TdxHq_Disconnect

def TdxHq_GetSecurityCount(nMarket):
    return _TradeX.TdxHq_GetSecurityCount(nMarket)
TdxHq_GetSecurityCount = _TradeX.TdxHq_GetSecurityCount

def TdxHq_GetSecurityList(nMarket, nStart):
    return _TradeX.TdxHq_GetSecurityList(nMarket, nStart)
TdxHq_GetSecurityList = _TradeX.TdxHq_GetSecurityList

def TdxHq_GetSecurityBars(nCategory, nMarket, pszZqdm, nStart, INOUT):
    return _TradeX.TdxHq_GetSecurityBars(nCategory, nMarket, pszZqdm, nStart, INOUT)
TdxHq_GetSecurityBars = _TradeX.TdxHq_GetSecurityBars

def TdxHq_GetIndexBars(nCategory, nMarket, pszZqdm, nStart, INOUT):
    return _TradeX.TdxHq_GetIndexBars(nCategory, nMarket, pszZqdm, nStart, INOUT)
TdxHq_GetIndexBars = _TradeX.TdxHq_GetIndexBars

def TdxHq_GetMinuteTimeData(nMarket, pszZqdm):
    return _TradeX.TdxHq_GetMinuteTimeData(nMarket, pszZqdm)
TdxHq_GetMinuteTimeData = _TradeX.TdxHq_GetMinuteTimeData

def TdxHq_GetHistoryMinuteTimeData(nMarket, pszZqdm, nDate):
    return _TradeX.TdxHq_GetHistoryMinuteTimeData(nMarket, pszZqdm, nDate)
TdxHq_GetHistoryMinuteTimeData = _TradeX.TdxHq_GetHistoryMinuteTimeData

def TdxHq_GetTransactionData(nMarket, pszZqdm, nStart, INOUT):
    return _TradeX.TdxHq_GetTransactionData(nMarket, pszZqdm, nStart, INOUT)
TdxHq_GetTransactionData = _TradeX.TdxHq_GetTransactionData

def TdxHq_GetHistoryTransactionData(nMarket, pszZqdm, nStart, INOUT, date):
    return _TradeX.TdxHq_GetHistoryTransactionData(nMarket, pszZqdm, nStart, INOUT, date)
TdxHq_GetHistoryTransactionData = _TradeX.TdxHq_GetHistoryTransactionData

def TdxHq_GetSecurityQuotes(nMarket, pszZqdm, nCount):
    return _TradeX.TdxHq_GetSecurityQuotes(nMarket, pszZqdm, nCount)
TdxHq_GetSecurityQuotes = _TradeX.TdxHq_GetSecurityQuotes

def TdxHq_GetCompanyInfoCategory(nMarket, pszZqdm):
    return _TradeX.TdxHq_GetCompanyInfoCategory(nMarket, pszZqdm)
TdxHq_GetCompanyInfoCategory = _TradeX.TdxHq_GetCompanyInfoCategory

def TdxHq_GetCompanyInfoContent(nMarket, pszZqdm, pszFileName, nStart, nLength):
    return _TradeX.TdxHq_GetCompanyInfoContent(nMarket, pszZqdm, pszFileName, nStart, nLength)
TdxHq_GetCompanyInfoContent = _TradeX.TdxHq_GetCompanyInfoContent

def TdxHq_GetXDXRInfo(nMarket, pszZqdm):
    return _TradeX.TdxHq_GetXDXRInfo(nMarket, pszZqdm)
TdxHq_GetXDXRInfo = _TradeX.TdxHq_GetXDXRInfo

def TdxHq_GetFinanceInfo(nMarket, pszZqdm):
    return _TradeX.TdxHq_GetFinanceInfo(nMarket, pszZqdm)
TdxHq_GetFinanceInfo = _TradeX.TdxHq_GetFinanceInfo
# This file is compatible with both classic and new-style classes.


